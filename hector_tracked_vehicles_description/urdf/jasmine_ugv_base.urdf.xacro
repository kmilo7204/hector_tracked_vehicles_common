<?xml version="1.0"?>

<robot
    xmlns:xacro="http://www.ros.org/wiki/xacro"
    xmlns:interface="http://www.ros.org/wiki/xacro">
    
    <xacro:include filename="$(find hector_tracked_vehicles_description)/urdf/tracked_wheel.urdf.xacro" />
    <xacro:include filename="$(find hector_xacro_tools)/urdf/inertia_tensors.urdf.xacro" />
  
    
    <!-- Properties (Constants) -->
    <xacro:property name="M_PI" value="3.14159"/>
    
    <xacro:property name="base_size_x" value="0.255" />
    <xacro:property name="base_size_y" value="0.12" />
    <xacro:property name="base_size_z" value="0.045" />
    
    <xacro:property name="wheel_radius_big" value="0.080" />
    <xacro:property name="wheel_length" value="0.02" />
    <xacro:property name="wheel_size_y" value="0.0825" />

    <xacro:property name="track_width" value="0.0825" />    

    <xacro:property name="total_width" value="0.297" />
    <!--    <xacro:property name="wheel_offset_y" value="${(total_width - wheel_size_y) / 2}" />-->
    <xacro:property name="wheel_offset_y" value="0.1697" />
    <xacro:property name="wheel_offset_z_from_base_link" value="-0.0" />
    
    <xacro:property name="ground_clearance" value="0.05" />

    <xacro:property name="flipper_offset_x" value="-0.04" />    
    
    
    <xacro:property name="top_size_x" value="0.3937" />
    <xacro:property name="top_size_y" value="0.3556" />
    <xacro:property name="top_size_z" value="0.0020" />
      
    <xacro:macro name="jasmine_ugv_macro">
        <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin,
             navigation stack depends on this frame -->
<!--        <link name="base_footprint">
            <inertial>
                <mass value="0.0001" />
                <origin xyz="0 0 0" />
                <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
                         iyy="0.0001" iyz="0.0" 
                         izz="0.0001" />
            </inertial>
            
            <visual>
                <origin xyz="0 0 0" rpy="0 0 0" />
                <geometry>
                    <box size="0.001 0.001 0.001" />
                </geometry>
                <material name="Green" >
                    <color rgba="0 0.8 0 1"/>
                </material>
            </visual>
            
        </link>
        
        <joint name="base_footprint_joint" type="fixed">
            <origin xyz="0 0 ${base_size_z/2 + 0.051}" rpy="0 0 0" />
             
            <parent link="base_footprint"/>
            <child link="base_link" />
        </joint>-->
        
        <!-- Links and Joints (i.e., the robot) -->
        <link name="base_link">
          <xacro:inertial_cuboid_with_pose mass="25" x_length="${base_size_x*2}" y_length="${base_size_y*2}" z_length="${base_size_z*2}" >
            <origin xyz="0 0 0 " rpy="0 0 0" />
          </xacro:inertial_cuboid_with_pose>
            
            <visual>
                <origin xyz="0.0 0.0 -0.085" rpy="0 0 0" />
                <geometry>
                    <!--<box size="${base_size_x} ${base_size_y} ${base_size_z}" />-->
                    <mesh filename="package://hector_tracked_vehicles_description/meshes/jasmine_ugv/jasmine_ugv_simple_colored_v001.dae"/>
                </geometry>
                <material name="Grey" >
                    <color rgba="0.8 0.8 0.8 1"/>
                </material>
                
            </visual>
            
            <collision>
                <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
                <geometry>
                    <box size="${base_size_x*2} ${base_size_y*2} ${base_size_z*2}" />
                </geometry>
            </collision>
            
            <collision>
              <origin xyz="${base_size_x+flipper_offset_x} ${-wheel_offset_y} 0.0" rpy="${M_PI/2} 0 0"/>
              <geometry>
                <cylinder length="${track_width}" radius="${wheel_radius_big}"/>
              </geometry>
            </collision>
      
            <collision>
              <origin xyz="${-base_size_x-flipper_offset_x}  ${-wheel_offset_y} 0.0" rpy="${M_PI/2} 0 0"/>
              <geometry>
                <cylinder length="${track_width}" radius="${wheel_radius_big}"/>
              </geometry>
            </collision>      
      
            <collision>
              <origin xyz="0 ${-wheel_offset_y} 0.0" rpy="0 0 0"/>
              <geometry>
                <box size="${base_size_x*2+flipper_offset_x*2} ${track_width} ${wheel_radius_big*2}"/>
              </geometry>
            </collision> 
      
            <collision>
              <origin xyz="${base_size_x+flipper_offset_x} ${wheel_offset_y} 0.0" rpy="${M_PI/2} 0 0"/>
              <geometry>
                <cylinder length="${track_width}" radius="${wheel_radius_big}"/>
              </geometry>
            </collision>
      
            <collision>
              <origin xyz="${-base_size_x-flipper_offset_x}  ${wheel_offset_y} 0.0" rpy="${M_PI/2} 0 0"/>
              <geometry>
                <cylinder length="${track_width}" radius="${wheel_radius_big}"/>
              </geometry>
            </collision>      
      
            <collision>
              <origin xyz="0 ${wheel_offset_y} 0.0" rpy="0 0 0"/>
              <geometry>
                <box size="${base_size_x*2+flipper_offset_x*2} ${track_width} ${wheel_radius_big*2}"/>
              </geometry>
            </collision> 
                        
        </link>
        
        
       <!--	Add wheels using the hlugv_wheel macro -->
       <!-- Obsolete, replaced by force-based move macro
        <xacro:tracked_wheel parent="base_link" prefix="left_0" offset_x= "0.21100" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        <xacro:tracked_wheel parent="base_link" prefix="left_1" offset_x= "0.0" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link-0.01}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        <xacro:tracked_wheel parent="base_link" prefix="left_2" offset_x= "-0.21100" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        <xacro:tracked_wheel parent="base_link" prefix="left_3" offset_x= "0.10550" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        <xacro:tracked_wheel parent="base_link" prefix="left_4" offset_x= "-0.10550" offset_y = "${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        <xacro:tracked_wheel parent="base_link" prefix="right_0" offset_x= "0.21100" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        <xacro:tracked_wheel parent="base_link" prefix="right_1" offset_x= "0.0" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link-0.01}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        <xacro:tracked_wheel parent="base_link" prefix="right_2" offset_x= "-0.21100" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        <xacro:tracked_wheel parent="base_link" prefix="right_3" offset_x= "-0.10550" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        <xacro:tracked_wheel parent="base_link" prefix="right_4" offset_x= "0.10550" offset_y = "-${wheel_offset_y}" offset_z = "${wheel_offset_z_from_base_link}" reflect="1" wheel_radius="${wheel_radius_big}"/>
        
        <gazebo>
            
        <plugin name="diffdrive_plugin_multiwheel" filename="libdiffdrive_plugin_multi_wheel.so">                
                <alwaysOn>true</alwaysOn>
                <updateRate>10.0</updateRate>
                <leftJoints>left_0_wheel_joint left_1_wheel_joint left_2_wheel_joint left_3_wheel_joint left_4_wheel_joint</leftJoints>
                <rightJoints>right_0_wheel_joint right_1_wheel_joint right_2_wheel_joint right_3_wheel_joint right_4_wheel_joint</rightJoints>
                <wheelSeparation>${wheel_offset_y*2}</wheelSeparation>
                <wheelDiameter>${wheel_radius_big*2}</wheelDiameter>
                <torque>50000</torque>
                <interface:position name="position_iface_2"/>
                <robotNamespace>/</robotNamespace>
                <robotBaseFrame>base_link</robotBaseFrame>
                <commandTopic>/cmd_vel_raw</commandTopic>
                <publishOdometryTf>0</publishOdometryTf>
                <publishOdometryMsg>1</publishOdometryMsg>
        </plugin>
        
        </gazebo>
        -->
        
    <gazebo reference="base_link">
      <mu1>0.0</mu1>
      <mu2>0.0</mu2>
      <kp>1000000.0</kp>
      <kd>100.0</kd>
      <minDepth>0.001</minDepth>
      <maxVel>1.0</maxVel>
    </gazebo>
        
    <gazebo>
      <plugin name="force_based_move_controller" filename="libgazebo_ros_force_based_move.so">
        <commandTopic>/cmd_vel_raw</commandTopic>
        <odometryTopic>odom</odometryTopic>
        <odometryFrame>odom</odometryFrame>
        <odometryRate>20.0</odometryRate>
        <robotBaseFrame>base_link</robotBaseFrame>
        <yaw_velocity_p_gain>50</yaw_velocity_p_gain>
        <x_velocity_p_gain>50</x_velocity_p_gain>
        <y_velocity_p_gain>50</y_velocity_p_gain>
        <publishOdometryTf>1</publishOdometryTf>
      </plugin>
    </gazebo>
        
        <gazebo>
        
        <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>50.0</updateRate>
          <bodyName>base_link</bodyName>
          <topicName>ground_truth/state</topicName>
          <gaussianNoise>0.01</gaussianNoise>
          <frameName>world</frameName>
          <xyzOffsets>0 0 0</xyzOffsets>
          <rpyOffsets>0 0 0</rpyOffsets>
        </plugin>

        <plugin name="imu_controller" filename="libhector_gazebo_ros_imu.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>50.0</updateRate>
          <bodyName>base_link</bodyName>
          <topicName>imu_quat</topicName>
          <accelDrift>0.0 0.0 0.0</accelDrift>
          <accelGaussianNoise>0.1 0.1 0.1</accelGaussianNoise>
          <rateDrift>0.0 0.0 0.0</rateDrift>
          <rateGaussianNoise>0.05 0.05 0.05</rateGaussianNoise>
          <headingDrift>0.0</headingDrift>
          <headingGaussianNoise>0.05</headingGaussianNoise>
        </plugin>
            
<!--        <plugin name="gazebo_ros_controller_manager" filename="libgazebo_ros_controller_manager.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>1000.0</updateRate>
        </plugin>-->
            
           <!-- 
            <canonicalBody>base_footprint</canonicalBody>
            
            <controller:gazebo_ros_controller_manager name="gazebo_ros_controller_manager" plugin="libgazebo_ros_controller_manager.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>100.0</updateRate>
                <interface:audio name="gazebo_ros_controller_manager_dummy_iface" />
            </controller:gazebo_ros_controller_manager>
            
            <controller:gazebo_ros_imu name="imu_controller" plugin="libgazebo_ros_imu.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>50</updateRate>
                <bodyName>base_link</bodyName>
                <topicName>hlugv_imu</topicName>
                <gaussianNoise>0.1</gaussianNoise>
                <xyzOffsets>0 0 0</xyzOffsets> 
                <rpyOffsets>0 0 0</rpyOffsets>
                <interface:position name="imu_position"/>
            </controller:gazebo_ros_imu>
            -->
            
        </gazebo>
        
        <!--        
        <gazebo reference="base_link">
            <material>HLUGV/Green</material>
        </gazebo>
        -->
        
    </xacro:macro>
</robot>
